generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleOptions {
  USER
  OWNER
  ADMIN
}

model User {
  userId       String        @id @default(cuid())
  name         String
  email        String        @unique
  password     String
  phone_number String
  user_active  Boolean       @default(true)
  roles        RoleOptions[] @default([USER])
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  address      Address?
  Order        Order[]

  @@map("users")
}

model Address {
  addressId  String   @id @default(cuid())
  number     Int
  street     String
  district   String
  zip_code   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String @unique
  user    User   @relation(fields: [user_id], references: [userId], onDelete: Cascade)

  @@map("addresses")
}

model Product {
  productId   Int      @id @default(autoincrement())
  name        String
  description String
  size        String
  price       Decimal
  imageUrl    String?
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category_id  Int
  category     Category       @relation(fields: [category_id], references: [categoryId])
  orderProduct OrderProduct[]

  @@map("products")
}

model Category {
  categoryId Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]

  @@map("categories")
}

model Order {
  orderId    Int         @id @default(autoincrement())
  status     OrderStatus @default(WAITING_EVALUATION)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  total      Decimal     @default(0)

  user User @relation(fields: [user_id], references: [userId])

  orderProduct OrderProduct[]
  user_id      String

  @@map("orders")
}

enum OrderStatus {
  WAITING_EVALUATION
  WAITING_PAYMENT
  CANCELLED
  IN_PROGRESS
  IN_TRANSPORT
  FINISHED
}

model OrderProduct {
  orderProductId String   @id @default(cuid())
  quantity       Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  order      Order   @relation(fields: [order_id], references: [orderId])
  product    Product @relation(fields: [product_id], references: [productId])
  order_id   Int
  product_id Int

  @@map("orders_products")
}
